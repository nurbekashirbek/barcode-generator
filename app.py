from flask import Flask, request, send_file, render_template
import barcode
from barcode.writer import ImageWriter
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from PIL import Image
import os

app = Flask(__name__)  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ __name__

def generate_barcode(code, folder="static/barcodes"):
    """–°–æ–∑–¥–∞–Ω–∏–µ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ –±–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, —Å –æ–±—Ä–µ–∑–∫–æ–π –ø–æ –≤—ã—Å–æ—Ç–µ"""
    if not os.path.exists(folder):
        os.makedirs(folder)  # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç

    barcode_class = barcode.get_barcode_class('code128')
    filename = os.path.join(folder, code)  # –§–∞–π–ª –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

    try:
        barcode_instance = barcode_class(code, writer=ImageWriter())
        barcode_instance.save(filename, {
            "module_width": 0.3,  
            "module_height": 40,  
            "font_size": 1,  
            "dpi": 300  
        })

        png_path = filename + ".png"
        if not os.path.exists(png_path):
            raise FileNotFoundError(f"–§–∞–π–ª {png_path} –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω!")

        img = Image.open(png_path)
        width, height = img.size
        cropped_img = img.crop((0, 0, width, int(height * 0.5)))  
        cropped_img.save(png_path)

        absolute_path = os.path.abspath(png_path).replace("\\", "/")
        print(f"‚úÖ –®—Ç—Ä–∏—Ö–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {absolute_path}")

        return absolute_path  
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞: {e}")
        return None

def generate_pdf(location, count):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF, –≥–¥–µ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –±–ª–∏–∂–µ –∫ –ª–µ–≤–æ–º—É –∫—Ä–∞—é –∏ —Ç–µ–∫—Å—Ç —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω."""
    pdf_path = os.path.abspath("static/generated_barcodes.pdf").replace("\\", "/")

    if not os.path.exists("static"):
        os.makedirs("static")  

    c = canvas.Canvas(pdf_path, pagesize=letter)
    page_width, page_height = letter  
    margin_x = 20  # –õ–µ–≤—ã–π –æ—Ç—Å—Ç—É–ø
    margin_y = page_height - 100  # –í–µ—Ä—Ö–Ω–∏–π –æ—Ç—Å—Ç—É–ø
    row_gap = 105  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —à—Ç—Ä–∏—Ö–∫–æ–¥–∞–º–∏
    max_rows = 6  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    row = 0  

    for i in range(1, count + 1):
        code = f"{location}{i}"
        img_path = generate_barcode(code)  

        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π –≤ PDF: {img_path}")  

        if img_path and os.path.exists(img_path):  
            x = margin_x  
            y = margin_y - (row * row_gap)  

            barcode_width = 250  
            barcode_height = 50  
            c.drawImage(img_path, x, y + 20, width=barcode_width, height=barcode_height, mask='auto')

            # üî• –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç 28 –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            c.setFont("Helvetica-Bold", 28)  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ 28
            text_x = x + (barcode_width / 2) - (len(code) * 7)  # –ü–æ–¥–≥–æ–Ω—è–µ–º —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
            c.drawString(text_x, y - 8, code)  # –¢–µ–∫—Å—Ç —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è –Ω–∏–∂–µ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞

            row += 1  
            if row >= max_rows:  
                c.showPage()
                row = 0  
                margin_y = page_height - 100  
        else:
            print(f"‚ö† –û—à–∏–±–∫–∞: –§–∞–π–ª {img_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    c.save()
    print(f"‚úÖ PDF —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {pdf_path}")
    return pdf_path


@app.route('/')
def home():
    return render_template("index.html")

@app.route('/generate', methods=['POST'])
def generate():
    data = request.json
    location = data.get("location", "TXT")
    count = int(data.get("count", 60))
    
    print(f"üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –¥–ª—è: {location}1 - {location}{count}")

    try:
        pdf_file = generate_pdf(location, count)
        print(f"‚úÖ PDF —Å–æ–∑–¥–∞–Ω: {pdf_file}")
        return send_file(pdf_file, as_attachment=True)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {e}")
        return {"error": str(e)}, 500

if __name__ == '__main__':  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ __name__
    app.run(debug=True)
